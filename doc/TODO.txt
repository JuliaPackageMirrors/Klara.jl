01) Add tuners based on established adaptive MCMC schemes
02 - done) Add empirical tuner for MCMC samplers
03 - done) Allow storage of gradients in runners
04 - done) Port zero-variance estimators from GeometricMCMC
05 - done) Extend MCMCLikModel constructor to allow for user-inputed evalall functions
06 - done) Split RWM according to employed tuner or wrap tuning code in tune() functions
07) Extend autodiff capabilities for MCMC samplers that need higher order derivatives
08 - done) Update README file to reflect current state of MCMC package
09) Write a user guide using LaTeX (to be placed in doc directory)
10 - done) Organize Bayesian logit and probit examples and tests better
11) Add RMLMC (Semi-Explicit Riemmanian Manifold Lagrangian Monte Carlo) sampler
12 - done) Add eRMLMC (Explicit Riemmanian Manifold Lagrangian Monte Carlo) sampler
13 - done) Add PMALA (Position-dependent MALA) sampler
14) Add WHMC (Wormhole Hamiltonian Monte Carlo) sampler
15) Design and implement parallel population MCMC capable of running on cluster workers
16) Use BUGS approach based on graphical models to define Gibbs-based algorithms
17) EM (expectation-maximization) algorithm
18) Rejection sampling
19) Slice sampling
20) Importance sampling
22) MCMC for hierarchical models (constrained Monte Carlo)
23) Simulated annealing
24) ABC (Approximate Bayesian Computation) methods
25 - done) Implement estimators for MCMC variance, Monte Carlo error, effective sample size(ESS) and integrated
autocorrelation time
26) Implement MCMC summary statistics and MCMC convergence diagnostics that require spectral computations
27) Make algebraic changes in samplers to speed them up
